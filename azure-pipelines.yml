# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- development
pr:
- master
- development


variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs: 
- job: 'windows_cpp_build'
  pool:
    vmImage: 'windows-2022'
  steps:
  
  - task: VSBuild@1
    displayName: 'x86 build'
    inputs:
      solution: '**\*.vcxproj'
      msbuildArgs: '/p:PostBuildEventUseInBuild=false'
      platform: 'x86'
      configuration: 'release'

  - task: CopyFiles@2
    displayName: 'Copy x86 NetModuleWrapper.dll'
    inputs:
      SourceFolder: 'NetModuleWrapper\release'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)\x86'

  - task: VSBuild@1
    displayName: 'x64 build'
    inputs:
      solution: '**\*.vcxproj'
      msbuildArgs: '/p:PostBuildEventUseInBuild=false'
      platform: 'x64'
      configuration: 'release'

  - task: CopyFiles@2
    displayName: 'Copy x64 NetModuleWrapper.dll'
    inputs:
      SourceFolder: 'NetModuleWrapper\x64\release'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)\x64'
      
  - task: PublishBuildArtifacts@1
    displayName: 'publish artifacts to cpp_windows'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'cpp_windows'
      publishLocation: 'Container'

- job: 'linux_cpp_build'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: Bash@3
      displayName: 'Compile x86 / x64'
      inputs:
        filePath: 'NetModuleWrapper/compile-x86.sh'
        workingDirectory: 'NetModuleWrapper'

    - task: Bash@3
      displayName: 'Compile ARM'
      inputs:
        filePath: 'NetModuleWrapper/compile-arm.sh'
        workingDirectory: 'NetModuleWrapper'
          
    - task: CopyFiles@2
      displayName: 'Copy x86 NetModuleWrapper.so'
      inputs:
        SourceFolder: 'NetModuleWrapper/x86'
        Contents: 'NetModuleWrapper.so'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/x86'

    - task: CopyFiles@2
      displayName: 'Copy x64 NetModuleWrapper.so'
      inputs:
        SourceFolder: 'NetModuleWrapper/x64'
        Contents: 'NetModuleWrapper.so'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/x64'

    - task: CopyFiles@2
      displayName: 'Copy arm32 NetModuleWrapper.so'
      inputs:
        SourceFolder: 'NetModuleWrapper/arm32'
        Contents: 'NetModuleWrapper.so'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/arm32'

    - task: CopyFiles@2
      displayName: 'Copy arm64 NetModuleWrapper.so'
      inputs:
        SourceFolder: 'NetModuleWrapper/arm64'
        Contents: 'NetModuleWrapper.so'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/arm64'

    - task: PublishBuildArtifacts@1
      displayName: 'publish artifacts to cpp_linux'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'cpp_linux'
        publishLocation: 'Container'
    
- job: 'docfx_build'
  continueOnError: true
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.x'
  - task: DotNetCoreCLI@2
    displayName: 'Install docfx'
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'update -g docfx'
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: 'restore'
      feedsToUse: 'select'
  - task: CmdLine@2
    displayName: 'docfx build'
    inputs:
      script: 'docfx SlipeServer.Docs/docfx.json'
  - task: CopyFiles@2
    displayName: 'Copy DocFx output'
    inputs:
      SourceFolder: 'SlipeServer.Docs/_site'
      Contents: '**'
      TargetFolder: '$(System.ArtifactsDirectory)/docs'
      OverWrite: true
  - task: PublishBuildArtifacts@1
    displayName: 'publish artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'docs'
      publishLocation: 'Container'
  
- job: 'dotnet_build'
  pool:
    vmImage: 'windows-2022'
  dependsOn:
  - 'windows_cpp_build'
  - 'linux_cpp_build' 
  steps:
  - task: DownloadBuildArtifacts@1
    displayName: 'Download linux cpp'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'cpp_linux'
      downloadPath: '$(System.ArtifactsDirectory)/netmodulewrapper/linux'

  - task: CopyFiles@2
    displayName: 'Copy x86 NetModuleWrapper.so'
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/netmodulewrapper/linux/cpp_linux/x86'
      Contents: 'NetModuleWrapper.so'
      TargetFolder: 'SlipeServer.Net/Binaries/x86'
      OverWrite: true

  - task: CopyFiles@2
    displayName: 'Copy x64 NetModuleWrapper.so'
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/netmodulewrapper/linux/cpp_linux/x64'
      Contents: 'NetModuleWrapper.so'
      TargetFolder: 'SlipeServer.Net/Binaries/x64'
      OverWrite: true

  - task: CopyFiles@2
    displayName: 'Copy arm32 NetModuleWrapper.so'
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/netmodulewrapper/linux/cpp_linux/arm32'
      Contents: 'NetModuleWrapper.so'
      TargetFolder: 'SlipeServer.Net/Binaries/arm32'
      OverWrite: true

  - task: CopyFiles@2
    displayName: 'Copy arm64 NetModuleWrapper.so'
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/netmodulewrapper/linux/cpp_linux/arm64'
      Contents: 'NetModuleWrapper.so'
      TargetFolder: 'SlipeServer.Net/Binaries/arm64'
      OverWrite: true

  - task: DownloadBuildArtifacts@1
    displayName: 'Download windows cpp'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'cpp_windows'
      downloadPath: '$(System.ArtifactsDirectory)/netmodulewrapper/windows'

  - task: CopyFiles@2
    displayName: 'Copy x86 NetModuleWrapper.dll'
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/netmodulewrapper/windows/cpp_windows/x86'
      Contents: 'NetModuleWrapper.dll'
      TargetFolder: 'SlipeServer.Net/Binaries/x86'
      OverWrite: true

  - task: CopyFiles@2
    displayName: 'Copy x64 NetModuleWrapper.dll'
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/netmodulewrapper/windows/cpp_windows/x64'
      Contents: 'NetModuleWrapper.dll'
      TargetFolder: 'SlipeServer.Net/Binaries/x64'
      OverWrite: true
  

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.x'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: 'restore'
      feedsToUse: 'select'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: 'build'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: 'test'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: 'pack'
      packagesToPack: '**/SlipeServer.Packets.csproj;**/SlipeServer.Net.csproj;**/SlipeServer.Server.csproj;**/SlipeServer.Server.TestTools.csproj;**/SlipeServer.Scripting.csproj;**/SlipeServer.Lua.csproj;**/SlipeServer.Physics.csproj;**/SlipeServer.SourceGenerators.csproj;**/SlipeServer.LuaControllers.csproj;**/SlipeServer.Hosting.csproj'
      versioningScheme: 'byPrereleaseNumber'
      majorVersion: '0'
      minorVersion: '1'
      patchVersion: '0'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '**/*.sln'
      arguments: '--output $(Build.ArtifactStagingDirectory)'
      
  - task: PublishBuildArtifacts@1
    displayName: 'publish artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
